{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 152,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 159,
   "metadata": {},
   "outputs": [],
   "source": [
    "df = pd.read_csv((\"budget_data.csv\"),encoding = \"utf-8\",sep =\",\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 190,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Date</th>\n",
       "      <th>Profit/Losses</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Jan-10</td>\n",
       "      <td>867884</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Feb-10</td>\n",
       "      <td>984655</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Mar-10</td>\n",
       "      <td>322013</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Apr-10</td>\n",
       "      <td>-69417</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>May-10</td>\n",
       "      <td>310503</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     Date  Profit/Losses\n",
       "0  Jan-10         867884\n",
       "1  Feb-10         984655\n",
       "2  Mar-10         322013\n",
       "3  Apr-10         -69417\n",
       "4  May-10         310503"
      ]
     },
     "execution_count": 190,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 219,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "TP: 38382578\n",
      "0\n",
      "867884\n",
      "PC: 867884\n",
      "PP: 867884\n",
      "TP: 38382578\n",
      "1\n",
      "984655\n",
      "PC: 116771\n",
      "PP: 984655\n",
      "TP: 38382578\n",
      "2\n",
      "322013\n",
      "PC: -662642\n",
      "PP: 322013\n",
      "TP: 38382578\n",
      "3\n",
      "-69417\n",
      "PC: -391430\n",
      "PP: -69417\n",
      "TP: 38382578\n",
      "4\n",
      "310503\n",
      "PC: 379920\n",
      "PP: 310503\n",
      "TP: 38382578\n",
      "5\n",
      "522857\n",
      "PC: 212354\n",
      "PP: 522857\n",
      "TP: 38382578\n",
      "6\n",
      "1033096\n",
      "PC: 510239\n",
      "PP: 1033096\n",
      "TP: 38382578\n",
      "7\n",
      "604885\n",
      "PC: -428211\n",
      "PP: 604885\n",
      "TP: 38382578\n",
      "8\n",
      "-216386\n",
      "PC: -821271\n",
      "PP: -216386\n",
      "TP: 38382578\n",
      "9\n",
      "477532\n",
      "PC: 693918\n",
      "PP: 477532\n",
      "TP: 38382578\n",
      "10\n",
      "893810\n",
      "PC: 416278\n",
      "PP: 893810\n",
      "TP: 38382578\n",
      "11\n",
      "-80353\n",
      "PC: -974163\n",
      "PP: -80353\n",
      "TP: 38382578\n",
      "12\n",
      "779806\n",
      "PC: 860159\n",
      "PP: 779806\n",
      "TP: 38382578\n",
      "13\n",
      "-335203\n",
      "PC: -1115009\n",
      "PP: -335203\n",
      "TP: 38382578\n",
      "14\n",
      "697845\n",
      "PC: 1033048\n",
      "PP: 697845\n",
      "TP: 38382578\n",
      "15\n",
      "793163\n",
      "PC: 95318\n",
      "PP: 793163\n",
      "TP: 38382578\n",
      "16\n",
      "485070\n",
      "PC: -308093\n",
      "PP: 485070\n",
      "TP: 38382578\n",
      "17\n",
      "584122\n",
      "PC: 99052\n",
      "PP: 584122\n",
      "TP: 38382578\n",
      "18\n",
      "62729\n",
      "PC: -521393\n",
      "PP: 62729\n",
      "TP: 38382578\n",
      "19\n",
      "668179\n",
      "PC: 605450\n",
      "PP: 668179\n",
      "TP: 38382578\n",
      "20\n",
      "899906\n",
      "PC: 231727\n",
      "PP: 899906\n",
      "TP: 38382578\n",
      "21\n",
      "834719\n",
      "PC: -65187\n",
      "PP: 834719\n",
      "TP: 38382578\n",
      "22\n",
      "132003\n",
      "PC: -702716\n",
      "PP: 132003\n",
      "TP: 38382578\n",
      "23\n",
      "309978\n",
      "PC: 177975\n",
      "PP: 309978\n",
      "TP: 38382578\n",
      "24\n",
      "-755566\n",
      "PC: -1065544\n",
      "PP: -755566\n",
      "TP: 38382578\n",
      "25\n",
      "1170593\n",
      "PC: 1926159\n",
      "PP: 1170593\n",
      "TP: 38382578\n",
      "26\n",
      "252788\n",
      "PC: -917805\n",
      "PP: 252788\n",
      "TP: 38382578\n",
      "27\n",
      "1151518\n",
      "PC: 898730\n",
      "PP: 1151518\n",
      "TP: 38382578\n",
      "28\n",
      "817256\n",
      "PC: -334262\n",
      "PP: 817256\n",
      "TP: 38382578\n",
      "29\n",
      "570757\n",
      "PC: -246499\n",
      "PP: 570757\n",
      "TP: 38382578\n",
      "30\n",
      "506702\n",
      "PC: -64055\n",
      "PP: 506702\n",
      "TP: 38382578\n",
      "31\n",
      "-1022534\n",
      "PC: -1529236\n",
      "PP: -1022534\n",
      "TP: 38382578\n",
      "32\n",
      "475062\n",
      "PC: 1497596\n",
      "PP: 475062\n",
      "TP: 38382578\n",
      "33\n",
      "779976\n",
      "PC: 304914\n",
      "PP: 779976\n",
      "TP: 38382578\n",
      "34\n",
      "144175\n",
      "PC: -635801\n",
      "PP: 144175\n",
      "TP: 38382578\n",
      "35\n",
      "542494\n",
      "PC: 398319\n",
      "PP: 542494\n",
      "TP: 38382578\n",
      "36\n",
      "359333\n",
      "PC: -183161\n",
      "PP: 359333\n",
      "TP: 38382578\n",
      "37\n",
      "321469\n",
      "PC: -37864\n",
      "PP: 321469\n",
      "TP: 38382578\n",
      "38\n",
      "67780\n",
      "PC: -253689\n",
      "PP: 67780\n",
      "TP: 38382578\n",
      "39\n",
      "471435\n",
      "PC: 403655\n",
      "PP: 471435\n",
      "TP: 38382578\n",
      "40\n",
      "565603\n",
      "PC: 94168\n",
      "PP: 565603\n",
      "TP: 38382578\n",
      "41\n",
      "872480\n",
      "PC: 306877\n",
      "PP: 872480\n",
      "TP: 38382578\n",
      "42\n",
      "789480\n",
      "PC: -83000\n",
      "PP: 789480\n",
      "TP: 38382578\n",
      "43\n",
      "999942\n",
      "PC: 210462\n",
      "PP: 999942\n",
      "TP: 38382578\n",
      "44\n",
      "-1196225\n",
      "PC: -2196167\n",
      "PP: -1196225\n",
      "TP: 38382578\n",
      "45\n",
      "268997\n",
      "PC: 1465222\n",
      "PP: 268997\n",
      "TP: 38382578\n",
      "46\n",
      "-687986\n",
      "PC: -956983\n",
      "PP: -687986\n",
      "TP: 38382578\n",
      "47\n",
      "1150461\n",
      "PC: 1838447\n",
      "PP: 1150461\n",
      "TP: 38382578\n",
      "48\n",
      "682458\n",
      "PC: -468003\n",
      "PP: 682458\n",
      "TP: 38382578\n",
      "49\n",
      "617856\n",
      "PC: -64602\n",
      "PP: 617856\n",
      "TP: 38382578\n",
      "50\n",
      "824098\n",
      "PC: 206242\n",
      "PP: 824098\n",
      "TP: 38382578\n",
      "51\n",
      "581943\n",
      "PC: -242155\n",
      "PP: 581943\n",
      "TP: 38382578\n",
      "52\n",
      "132864\n",
      "PC: -449079\n",
      "PP: 132864\n",
      "TP: 38382578\n",
      "53\n",
      "448062\n",
      "PC: 315198\n",
      "PP: 448062\n",
      "TP: 38382578\n",
      "54\n",
      "689161\n",
      "PC: 241099\n",
      "PP: 689161\n",
      "TP: 38382578\n",
      "55\n",
      "800701\n",
      "PC: 111540\n",
      "PP: 800701\n",
      "TP: 38382578\n",
      "56\n",
      "1166643\n",
      "PC: 365942\n",
      "PP: 1166643\n",
      "TP: 38382578\n",
      "57\n",
      "947333\n",
      "PC: -219310\n",
      "PP: 947333\n",
      "TP: 38382578\n",
      "58\n",
      "578668\n",
      "PC: -368665\n",
      "PP: 578668\n",
      "TP: 38382578\n",
      "59\n",
      "988505\n",
      "PC: 409837\n",
      "PP: 988505\n",
      "TP: 38382578\n",
      "60\n",
      "1139715\n",
      "PC: 151210\n",
      "PP: 1139715\n",
      "TP: 38382578\n",
      "61\n",
      "1029471\n",
      "PC: -110244\n",
      "PP: 1029471\n",
      "TP: 38382578\n",
      "62\n",
      "687533\n",
      "PC: -341938\n",
      "PP: 687533\n",
      "TP: 38382578\n",
      "63\n",
      "-524626\n",
      "PC: -1212159\n",
      "PP: -524626\n",
      "TP: 38382578\n",
      "64\n",
      "158620\n",
      "PC: 683246\n",
      "PP: 158620\n",
      "TP: 38382578\n",
      "65\n",
      "87795\n",
      "PC: -70825\n",
      "PP: 87795\n",
      "TP: 38382578\n",
      "66\n",
      "423389\n",
      "PC: 335594\n",
      "PP: 423389\n",
      "TP: 38382578\n",
      "67\n",
      "840723\n",
      "PC: 417334\n",
      "PP: 840723\n",
      "TP: 38382578\n",
      "68\n",
      "568529\n",
      "PC: -272194\n",
      "PP: 568529\n",
      "TP: 38382578\n",
      "69\n",
      "332067\n",
      "PC: -236462\n",
      "PP: 332067\n",
      "TP: 38382578\n",
      "70\n",
      "989499\n",
      "PC: 657432\n",
      "PP: 989499\n",
      "TP: 38382578\n",
      "71\n",
      "778237\n",
      "PC: -211262\n",
      "PP: 778237\n",
      "TP: 38382578\n",
      "72\n",
      "650000\n",
      "PC: -128237\n",
      "PP: 650000\n",
      "TP: 38382578\n",
      "73\n",
      "-1100387\n",
      "PC: -1750387\n",
      "PP: -1100387\n",
      "TP: 38382578\n",
      "74\n",
      "-174946\n",
      "PC: 925441\n",
      "PP: -174946\n",
      "TP: 38382578\n",
      "75\n",
      "757143\n",
      "PC: 932089\n",
      "PP: 757143\n",
      "TP: 38382578\n",
      "76\n",
      "445709\n",
      "PC: -311434\n",
      "PP: 445709\n",
      "TP: 38382578\n",
      "77\n",
      "712961\n",
      "PC: 267252\n",
      "PP: 712961\n",
      "TP: 38382578\n",
      "78\n",
      "-1163797\n",
      "PC: -1876758\n",
      "PP: -1163797\n",
      "TP: 38382578\n",
      "79\n",
      "569899\n",
      "PC: 1733696\n",
      "PP: 569899\n",
      "TP: 38382578\n",
      "80\n",
      "768450\n",
      "PC: 198551\n",
      "PP: 768450\n",
      "TP: 38382578\n",
      "81\n",
      "102685\n",
      "PC: -665765\n",
      "PP: 102685\n",
      "TP: 38382578\n",
      "82\n",
      "795914\n",
      "PC: 693229\n",
      "PP: 795914\n",
      "TP: 38382578\n",
      "83\n",
      "60988\n",
      "PC: -734926\n",
      "PP: 60988\n",
      "TP: 38382578\n",
      "84\n",
      "138230\n",
      "PC: 77242\n",
      "PP: 138230\n",
      "TP: 38382578\n",
      "85\n",
      "671099\n",
      "PC: 532869\n",
      "PP: 671099\n",
      "GI: ['D', 532869]\n",
      "GD: ['D', 532869]\n",
      "RA: 0.0\n"
     ]
    }
   ],
   "source": [
    "total_months = 0\n",
    "total_profit = 0\n",
    "prev_profit = 0\n",
    "profit_change = 0\n",
    "greatest_increase = [\"\", 0]\n",
    "greatest_decrease = [\"\", 9999999999999999]\n",
    "rev_change=[]\n",
    "for i in range(len(df)):\n",
    "    total_months = total_months + 1\n",
    "#     total_profit = total_profit + int(row([1]))\n",
    "    total_profit = df[\"Profit/Losses\"].sum()\n",
    "    print(\"TP: {}\".format(total_profit))\n",
    "    print(i)\n",
    "    print(df.iloc[i,1])\n",
    "    profit_change = df.iloc[i,1] - prev_profit\n",
    "    print(\"PC: {}\".format(profit_change))\n",
    "    prev_profit = df.iloc[i,1]\n",
    "    print(\"PP: {}\".format(prev_profit))\n",
    "if(profit_change == df.iloc[i,1]):\n",
    "    profit_change=0\n",
    "    rev_change.append(int(row[1]))\n",
    "    print(\"RC: {}\".format(rev_change))\n",
    "#rev_change.append(int(row[1]))\n",
    "if(profit_change > greatest_increase[1]):\n",
    "    greatest_increase[1] = profit_change\n",
    "    greatest_increase[0] = row[0]\n",
    "    print(\"GI: {}\".format(greatest_increase))\n",
    "if(profit_change < greatest_decrease[1]):\n",
    "    greatest_decrease[1] = profit_change\n",
    "    greatest_decrease[0] = row[0]\n",
    "    print(\"GD: {}\".format(greatest_decrease))\n",
    "#  print(profit_change)\n",
    "revenue_avg = sum(rev_change) / df.iloc[i,1]\n",
    "print(\"RA: {}\".format(revenue_avg))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 237,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<_io.TextIOWrapper name='result.txt' mode='w' encoding='cp1252'>\n"
     ]
    }
   ],
   "source": [
    "f = open (\"result.txt\",\"w\")\n",
    "f.write(\"Analysis\\n\")\n",
    "f.write(\"---------------\\n\")\n",
    "f.write((\"total months:\" +str(total_months)) + \"\\n\")\n",
    "f.write(\"total profit\" + str(total_profit) + \"\\n\")\n",
    "f.write(\"profit change\" + str(round(profit_change,2)) + \"\\n\")\n",
    "f.write(\"greatest increase\" + str(greatest_increase) + \"\\n\")\n",
    "f.write(\"greatest decrease\" + str(greatest_decrease) + \")\\n\")\n",
    "f.close()\n",
    "print(f)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
